namespace CollectionManager.Extensions.Modules.CollectionListGenerator.ListTypes;

using CollectionManager.Core.Types;
using CollectionManager.Extensions.Modules.CollectionListGenerator;
using System.Collections.Generic;
using System.Text;

public class HtmlListGenerator : IListGenerator
{
    private StringBuilder _mainStringBuilder = new();
    private readonly StringBuilder _md5Output = new();

    /*{0} - username of creator
     * {1} - number of collections in list
     * {2} - Collections
     * 
     * 
    */
    private readonly string _htmlOutputHeader = @"<!DOCTYPE html>
<html>
<head>
    <script src=""https://code.jquery.com/jquery-3.1.1.min.js"" type=""text/javascript""></script>
    <style type=""text/css"">
    body{{background:#a9a9ff;margin:0;padding:0;text-align:center;min-width:500px;}}a{{color:#264A7F;text-decoration:none;}}h1{{color:#B25C5C;font-size:20px;font-family:""Comic Sans MS"",cursive;padding:5px;margin:0px;}}
    </style>
    <title></title>
</head>
<body>
<script type=""text/javascript"">
$.fn.slideFadeToggle = function(speed, easing, callback) {{
    return this.animate({{
        opacity: 'toggle',
        height: 'toggle'
    }}, speed, easing, callback);
}};
</script>
<h1 style=""border-bottom: dotted;border-color:#422E1A"">List of maps in collections<br />
Generated by: ""{0}""<br />
Number of collections listed: {1}<br /></h1>";
    private readonly string _htmlOutputFooter = "</body></html>";
    /*{0}-collection number
     * {1}-collection name
     * {2}-number of maps in collection(diffs)
     * 
     */
    private readonly string CollectionHeaderTemplate = @"<h1>Collection {0}: {1} ( {2} diffs )</h1>";
    /* {0} - map link
     * {1} - artist
     * {2} - title
     */
    private readonly string CollectionBeatmapTemplateFull = @"<a href=""{0}"" target=""_blank"">
{1} - {2} ";
    //{0} - md5
    private readonly string CollectionBeatmapTemplateMd5 = @"<a>No Data {0} </a><br />
";
    public void StartGenerating() => _mainStringBuilder.Clear();

    public void EndGenerating() => _mainStringBuilder.Clear();

    public string GetListHeader(OsuCollections collections) => string.Format(_htmlOutputHeader, "N/A", collections.Count);

    public string GetCollectionBody(IOsuCollection collection, Dictionary<int, Beatmaps> mapSets, int collectionNumber)
    {
        _ = _mainStringBuilder.Clear();

        _ = _mainStringBuilder.AppendFormat(CollectionHeaderTemplate, collectionNumber,
            collection.Name, collection.NumberOfBeatmaps);

        foreach (KeyValuePair<int, Beatmaps> mapSet in mapSets)
        {
            GetMapSetList(mapSet.Key, mapSet.Value, ref _mainStringBuilder);
        }

        return _mainStringBuilder.ToString();
    }

    public string GetListFooter(OsuCollections collections) => _htmlOutputFooter;
    private void GetMapSetList(int mapSetId, Beatmaps beatmaps, ref StringBuilder sb)
    {

        if (mapSetId == -1)
        {
            foreach (Beatmap map in beatmaps)
            {
                if (map.MapId > 0)
                {
                    _ = sb.AppendFormat(CollectionBeatmapTemplateFull, map.MapLink, map.ArtistRoman,
                        map.TitleRoman);
                    if (!string.IsNullOrWhiteSpace(map.DiffName))
                    {
                        _ = sb.AppendFormat("<a href=\"https://osu.ppy.sh/b/{0}\">[{1}]{2}★</a> ",
                            map.MapId, map.DiffName, map.StarsNomod);
                    }
                }
                else
                {
                    _ = _md5Output.AppendFormat(CollectionBeatmapTemplateMd5, map.Md5);
                }
            }
        }
        else
        {
            _ = sb.AppendFormat(CollectionBeatmapTemplateFull, beatmaps[0].MapLink, beatmaps[0].ArtistRoman,
                beatmaps[0].TitleRoman);
            foreach (Beatmap map in beatmaps)
            {
                _ = sb.AppendFormat("<a href=\"https://osu.ppy.sh/b/{0}\">[{1}]{2}★</a> ",
                    map.MapId, map.DiffName, map.StarsNomod);

            }

            _ = sb.Append("<br />");
        }
    }
}